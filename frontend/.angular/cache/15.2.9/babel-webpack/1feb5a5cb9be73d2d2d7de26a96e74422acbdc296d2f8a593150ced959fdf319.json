{"ast":null,"code":"var _class;\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport var toastTypes;\n(function (toastTypes) {\n  toastTypes[toastTypes[\"error\"] = 0] = \"error\";\n  toastTypes[toastTypes[\"info\"] = 1] = \"info\";\n  toastTypes[toastTypes[\"success\"] = 2] = \"success\";\n  toastTypes[toastTypes[\"warning\"] = 3] = \"warning\";\n})(toastTypes || (toastTypes = {}));\n;\nexport class ToastService {\n  constructor() {\n    this.color = 'gray';\n    this.open = new Subject();\n  }\n  openToast(data) {\n    switch (data.type) {\n      case 0:\n        this.color = 'red';\n        break;\n      case 1:\n        this.color = 'blue';\n        break;\n      case 2:\n        this.color = 'green';\n        break;\n      case 3:\n        this.color = 'red';\n        break;\n      default:\n        break;\n    }\n    setTimeout(() => {\n      this.data = {\n        ...data,\n        show: true\n      };\n    }, 100);\n    /* Out */\n    setTimeout(() => {\n      document.getElementById('toast-alert').classList.toggle('translate-x-96');\n      setTimeout(() => {\n        document.getElementById('toast-alert').classList.toggle('hidden');\n      }, 200);\n      this.data = {\n        ...this.data,\n        show: false\n      };\n    }, 5000);\n  }\n}\n_class = ToastService;\n_class.ɵfac = function ToastService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,MAAM;;AAE9B,WAAYC,UAKX;AALD,WAAYA,UAAU;EACpBA,6CAAK;EACLA,2CAAI;EACJA,iDAAO;EACPA,iDAAO;AACT,CAAC,EALWA,UAAU,KAAVA,UAAU;AAKrB;AAcD,OAAM,MAAOC,YAAY;EAJzBC;IAKE,UAAK,GAAW,MAAM;IAEf,SAAI,GAAG,IAAIH,OAAO,EAAa;;EAEtCI,SAAS,CAACC,IAAe;IACvB,QAAQA,IAAI,CAACC,IAAI;MACf,KAAK,CAAC;QACJ,IAAI,CAACC,KAAK,GAAG,KAAK;QAClB;MACF,KAAK,CAAC;QACJ,IAAI,CAACA,KAAK,GAAG,MAAM;QACnB;MACF,KAAK,CAAC;QACJ,IAAI,CAACA,KAAK,GAAG,OAAO;QACpB;MACF,KAAK,CAAC;QACJ,IAAI,CAACA,KAAK,GAAG,KAAK;QAClB;MAEF;QACE;IAAM;IAGVC,UAAU,CAAC,MAAK;MACd,IAAI,CAACH,IAAI,GAAG;QAAE,GAAGA,IAAI;QAAEI,IAAI,EAAE;MAAI,CAAC;IACpC,CAAC,EAAE,GAAG,CAAC;IAEP;IACAD,UAAU,CAAC,MAAK;MACdE,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAE,CAACC,SAAS,CAACC,MAAM,CAAC,gBAAgB,CAAC;MAC1EL,UAAU,CAAC,MAAK;QACdE,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAE,CAACC,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;MACpE,CAAC,EAAE,GAAG,CAAC;MACP,IAAI,CAACR,IAAI,GAAG;QAAE,GAAG,IAAI,CAACA,IAAI;QAAEI,IAAI,EAAE;MAAK,CAAE;IAC3C,CAAC,EAAE,IAAI,CAAC;EACV;;SApCWP,YAAY;;mBAAZA,MAAY;AAAA;;SAAZA,MAAY;EAAAY,SAAZZ,MAAY;EAAAa,YAHX;AAAM","names":["Subject","toastTypes","ToastService","constructor","openToast","data","type","color","setTimeout","show","document","getElementById","classList","toggle","factory","providedIn"],"sourceRoot":"","sources":["/Users/thor/Documents/Applications/foodmine/frontend/src/app/services/toast.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport enum toastTypes {\n  error,\n  info,\n  success,\n  warning\n};\n\nexport interface ToastData {\n  message: string;\n  type: toastTypes;\n  bgColor: string;\n  textColor: string;\n  show?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ToastService {\n  color: string = 'gray';\n  data!: ToastData;\n  public open = new Subject<ToastData>();\n\n  openToast(data: ToastData) {\n    switch (data.type) {\n      case 0:\n        this.color = 'red';\n        break;\n      case 1:\n        this.color = 'blue';\n        break;\n      case 2:\n        this.color = 'green';\n        break;\n      case 3:\n        this.color = 'red';\n        break;\n    \n      default:\n        break;\n    }\n\n    setTimeout(() => {\n      this.data = { ...data, show: true};\n    }, 100)\n\n    /* Out */\n    setTimeout(() => {\n      document.getElementById('toast-alert')!.classList.toggle('translate-x-96');\n      setTimeout(() => {\n        document.getElementById('toast-alert')!.classList.toggle('hidden');\n      }, 200);\n      this.data = { ...this.data, show: false };\n    }, 5000);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}