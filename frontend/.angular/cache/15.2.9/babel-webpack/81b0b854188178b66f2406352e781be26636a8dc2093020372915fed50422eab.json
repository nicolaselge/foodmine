{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { animate, style, transition, trigger, state } from '@angular/animations';\nimport { Component, ViewChild } from '@angular/core';\nlet ToastComponent = class ToastComponent {\n  constructor(toastService) {\n    this.toastService = toastService;\n  }\n  /*   bgColor: string = 'bg-green-200';\n    textColor: string = 'text-green-500';\n    typeMessage: string = 'success';\n    message: string = 'no message';\n  \n    public openToast(bgColor: string, textColor: string, typeMessage: string, message: string): void {\n      this.bgColor = bgColor;\n      this.textColor = textColor;\n      this.typeMessage = typeMessage;\n      this.message = message;\n      document.getElementById('toast-alert')!.classList.toggle('scale-0');\n      setTimeout(() => {\n        document.getElementById('toast-alert')!.classList.toggle('scale-0');\n      }, 5000);\n    }\n  \n    closeToast(element: Element): void {\n      element.classList.toggle('scale-0');\n    } */\n  ngOnInit() {\n    this.toastService.open.subscribe(data => {\n      if (data.show) {\n        this.countDown();\n      }\n      ;\n    });\n  }\n  countDown() {\n    this.progressBar.nativeElement.style.width = this.toastService.data.progressWidth;\n    this.progressInterval = setInterval(() => {\n      const width = parseInt(this.progressBar.nativeElement.style.width, 10);\n      if (width <= 0) {\n        this.toastService.hide();\n        clearInterval(this.progressInterval);\n        return;\n      }\n      this.toastService.data.progressWidth = String(width - 2);\n      this.progressBar.nativeElement.style.width = this.toastService.data.progressWidth + '%';\n    }, 150);\n  }\n  stopCountDown() {\n    clearInterval(this.progressInterval);\n  }\n};\n__decorate([ViewChild('element', {\n  static: false\n})], ToastComponent.prototype, \"progressBar\", void 0);\nToastComponent = __decorate([Component({\n  selector: 'app-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss'],\n  animations: [trigger('openClose', [state('closed', style({\n    visibility: 'hidden',\n    right: '-400px'\n  })), state('open', style({\n    right: '40px'\n  })), transition('open <=> closed', [animate('0.5s ease-in-out')])])]\n})], ToastComponent);\nexport { ToastComponent };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEC,OAAO,EAAEC,KAAK,QAAQ,qBAAqB;AAChF,SAASC,SAAS,EAAsBC,SAAS,QAAQ,eAAe;AA2BjE,IAAMC,cAAc,GAApB,MAAMA,cAAc;EACzBC,YAAmBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAKlD;;;;;;;;;;;;;;;;;;;EAoBEC,QAAQ;IACN,IAAI,CAACD,YAAY,CAACE,IAAI,CAACC,SAAS,CAACC,IAAI,IAAG;MACtC,IAAIA,IAAI,CAACC,IAAI,EAAE;QAAE,IAAI,CAACC,SAAS,EAAE;;MAAE;IACrC,CAAC,CAAC;EACJ;EAEAA,SAAS;IACP,IAAI,CAACC,WAAW,CAACC,aAAa,CAAChB,KAAK,CAACiB,KAAK,GAAG,IAAI,CAACT,YAAY,CAACI,IAAI,CAACM,aAAa;IACjF,IAAI,CAACC,gBAAgB,GAAGC,WAAW,CAAC,MAAK;MACvC,MAAMH,KAAK,GAAGI,QAAQ,CAAC,IAAI,CAACN,WAAW,CAACC,aAAa,CAAChB,KAAK,CAACiB,KAAK,EAAE,EAAE,CAAC;MAEtE,IAAGA,KAAK,IAAI,CAAC,EAAE;QACb,IAAI,CAACT,YAAY,CAACc,IAAI,EAAE;QACxBC,aAAa,CAAC,IAAI,CAACJ,gBAAgB,CAAC;QACpC;;MAGF,IAAI,CAACX,YAAY,CAACI,IAAI,CAACM,aAAa,GAAGM,MAAM,CAACP,KAAK,GAAG,CAAC,CAAC;MACxD,IAAI,CAACF,WAAW,CAACC,aAAa,CAAChB,KAAK,CAACiB,KAAK,GAAG,IAAI,CAACT,YAAY,CAACI,IAAI,CAACM,aAAa,GAAG,GAAG;IACzF,CAAC,EAAE,GAAG,CAAC;EACT;EAEAO,aAAa;IACXF,aAAa,CAAC,IAAI,CAACJ,gBAAgB,CAAC;EACtC;CACD;AAhDwCO,YAAtCrB,SAAS,CAAC,SAAS,EAAE;EAACsB,MAAM,EAAE;AAAK,CAAC,CAAC,mDAA0B;AAHrDrB,cAAc,eAxB1BF,SAAS,CAAC;EACTwB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB,CAAC;EACrCC,UAAU,EAAE,CACV7B,OAAO,CAAC,WAAW,EAAE,CACnBC,KAAK,CACH,QAAQ,EACRH,KAAK,CAAC;IACJgC,UAAU,EAAE,QAAQ;IACpBC,KAAK,EAAE;GACR,CAAC,CACH,EACD9B,KAAK,CACH,MAAM,EACNH,KAAK,CAAC;IACJiC,KAAK,EAAE;GACR,CAAC,CACH,EACDhC,UAAU,CAAC,iBAAiB,EAAE,CAACF,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAC7D,CAAC;CAEL,CAAC,GAEWO,cAAc,CAmD1B;SAnDYA,cAAc","names":["animate","style","transition","trigger","state","Component","ViewChild","ToastComponent","constructor","toastService","ngOnInit","open","subscribe","data","show","countDown","progressBar","nativeElement","width","progressWidth","progressInterval","setInterval","parseInt","hide","clearInterval","String","stopCountDown","__decorate","static","selector","templateUrl","styleUrls","animations","visibility","right"],"sourceRoot":"","sources":["/Users/thor/Documents/Applications/foodmine/frontend/src/app/components/partials/toast/toast.component.ts"],"sourcesContent":["import { animate, style, transition, trigger, state } from '@angular/animations';\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ToastService } from 'src/app/services/toast.service';\n\n@Component({\n  selector: 'app-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss'],\n  animations: [\n    trigger('openClose', [\n      state(\n        'closed',\n        style({\n          visibility: 'hidden',\n          right: '-400px',\n        })\n      ),\n      state(\n        'open',\n        style({\n          right: '40px',\n        })\n      ),\n      transition('open <=> closed', [animate('0.5s ease-in-out')]),\n    ]),\n  ],\n})\n\nexport class ToastComponent implements OnInit {\n  constructor(public toastService: ToastService) {}\n\n  @ViewChild('element', {static: false}) progressBar!: ElementRef;\n  progressInterval: any;\n\n/*   bgColor: string = 'bg-green-200';\n  textColor: string = 'text-green-500';\n  typeMessage: string = 'success';\n  message: string = 'no message';\n\n  public openToast(bgColor: string, textColor: string, typeMessage: string, message: string): void {\n    this.bgColor = bgColor;\n    this.textColor = textColor;\n    this.typeMessage = typeMessage;\n    this.message = message;\n    document.getElementById('toast-alert')!.classList.toggle('scale-0');\n    setTimeout(() => {\n      document.getElementById('toast-alert')!.classList.toggle('scale-0');\n    }, 5000);\n  }\n\n  closeToast(element: Element): void {\n    element.classList.toggle('scale-0');\n  } */\n\n  ngOnInit(): void {\n    this.toastService.open.subscribe(data => {\n      if (data.show) { this.countDown() };\n    });\n  }\n\n  countDown() {\n    this.progressBar.nativeElement.style.width = this.toastService.data.progressWidth;\n    this.progressInterval = setInterval(() => {\n      const width = parseInt(this.progressBar.nativeElement.style.width, 10);\n\n      if(width <= 0) {\n        this.toastService.hide();\n        clearInterval(this.progressInterval);\n        return;\n      }\n\n      this.toastService.data.progressWidth = String(width - 2);\n      this.progressBar.nativeElement.style.width = this.toastService.data.progressWidth + '%';\n    }, 150);\n  }\n\n  stopCountDown() {\n    clearInterval(this.progressInterval);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}