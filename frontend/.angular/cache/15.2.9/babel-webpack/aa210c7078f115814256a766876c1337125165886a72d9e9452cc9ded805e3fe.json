{"ast":null,"code":"var _class;\nimport { BehaviorSubject, tap } from 'rxjs';\nimport { User } from '../components/shared/user.model';\nimport { USER_LOGIN_URL } from '../components/constants/urls';\nimport { toastTypes } from './toast.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./toast.service\";\nconst USER_KEY = 'User';\nexport class UserService {\n  constructor(http, toast) {\n    this.http = http;\n    this.toast = toast;\n    this.userSubject = new BehaviorSubject(this.getUserToLocalStorage());\n    this.user$ = this.userSubject.asObservable();\n  }\n  login(userLogin) {\n    return this.http.post(USER_LOGIN_URL, userLogin).pipe(tap({\n      next: user => {\n        this.setUserToLocalStorage(user);\n        this.userSubject.next(user);\n        this.toast.openToast({\n          message: 'Vous êtes connecté.',\n          type: toastTypes.success\n        });\n      },\n      error: errorResponse => {\n        this.toast.openToast({\n          message: errorResponse.error,\n          type: toastTypes.success\n        });\n      }\n    }));\n  }\n  setUserToLocalStorage(user) {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n  getUserToLocalStorage() {\n    const userJson = localStorage.getItem(USER_KEY);\n    if (userJson) {\n      return JSON.parse(userJson);\n    }\n    as;\n    User;\n    return new User();\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;AACvD,SAASC,IAAI,QAAQ,iCAAiC;AAGtD,SAASC,cAAc,QAAQ,8BAA8B;AAE7D,SAAuBC,UAAU,QAAQ,iBAAiB;;;;AAE1D,MAAMC,QAAQ,GAAG,MAAM;AAIvB,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAASC,KAAmB;IAA5C,SAAI,GAAJD,IAAI;IAAqB,UAAK,GAALC,KAAK;IAH1C,gBAAW,GAAG,IAAIT,eAAe,CAAO,IAAI,CAACU,qBAAqB,EAAE,CAAC;IAI3E,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EAC9C;EAEAC,KAAK,CAACC,SAAqB;IACzB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAOb,cAAc,EAAEY,SAAS,CAAC,CAACE,IAAI,CACzDhB,GAAG,CAAC;MACFiB,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACC,qBAAqB,CAACD,IAAI,CAAC;QAChC,IAAI,CAACP,WAAW,CAACM,IAAI,CAACC,IAAI,CAAC;QAC3B,IAAI,CAACV,KAAK,CAACY,SAAS,CAAC;UACnBC,OAAO,EAAE,qBAAqB;UAC9BC,IAAI,EAAEnB,UAAU,CAACoB;SAClB,CAAC;MACJ,CAAC;MACDC,KAAK,EAAGC,aAAa,IAAI;QACvB,IAAI,CAACjB,KAAK,CAACY,SAAS,CAAC;UACnBC,OAAO,EAAEI,aAAa,CAACD,KAAK;UAC5BF,IAAI,EAAEnB,UAAU,CAACoB;SAClB,CAAC;MACJ;KACD,CAAC,CACH;EACH;EAEQJ,qBAAqB,CAACD,IAAU;IACtCQ,YAAY,CAACC,OAAO,CAACvB,QAAQ,EAAEwB,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,CAAC;EACtD;EAEQT,qBAAqB;IAC3B,MAAMqB,QAAQ,GAAGJ,YAAY,CAACK,OAAO,CAAC3B,QAAQ,CAAC;IAC/C,IAAG0B,QAAQ,EAAE;MAAE,OAAOF,IAAI,CAACI,KAAK,CAACF,QAAQ,CAAC;;IAAEG,EAAE;IAAChC,IAAI;IACnD,OAAO,IAAIA,IAAI,EAAE;EACnB;;SAtCWI,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAA6B,SAAX7B,MAAW;EAAA8B,YAFV;AAAM","names":["BehaviorSubject","tap","User","USER_LOGIN_URL","toastTypes","USER_KEY","UserService","constructor","http","toast","getUserToLocalStorage","user$","userSubject","asObservable","login","userLogin","post","pipe","next","user","setUserToLocalStorage","openToast","message","type","success","error","errorResponse","localStorage","setItem","JSON","stringify","userJson","getItem","parse","as","factory","providedIn"],"sourceRoot":"","sources":["/Users/thor/Documents/Applications/foodmine/frontend/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { User } from '../components/shared/user.model';\nimport { IUserLogin } from '../components/interfaces/IUserLogin';\nimport { HttpClient } from '@angular/common/http';\nimport { USER_LOGIN_URL } from '../components/constants/urls';\nimport { ToastComponent } from '../components/partials/toast/toast.component';\nimport { ToastService, toastTypes } from './toast.service';\n\nconst USER_KEY = 'User';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private userSubject = new BehaviorSubject<User>(this.getUserToLocalStorage());\n  public user$!: Observable<User>;\n\n  constructor(private http: HttpClient, public toast: ToastService) {\n    this.user$ = this.userSubject.asObservable();\n  }\n\n  login(userLogin: IUserLogin): Observable<User> {\n    return this.http.post<User>(USER_LOGIN_URL, userLogin).pipe(\n      tap({\n        next: (user) => {\n          this.setUserToLocalStorage(user)\n          this.userSubject.next(user);\n          this.toast.openToast({\n            message: 'Vous êtes connecté.',\n            type: toastTypes.success,\n          });\n        },\n        error: (errorResponse) => {\n          this.toast.openToast({\n            message: errorResponse.error,\n            type: toastTypes.success,\n          });\n        }\n      })\n    );\n  }\n\n  private setUserToLocalStorage(user: User) {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  private getUserToLocalStorage(): User {\n    const userJson = localStorage.getItem(USER_KEY);\n    if(userJson) { return JSON.parse(userJson)} as User;\n    return new User();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}