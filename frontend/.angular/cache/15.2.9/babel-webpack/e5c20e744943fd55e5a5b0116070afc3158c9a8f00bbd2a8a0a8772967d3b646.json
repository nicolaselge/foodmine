{"ast":null,"code":"var _class;\nimport { Cart } from '../components/shared/cart.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { CartItem } from '../components/shared/cartItem.model';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = this.getCartFromLocalStorage();\n    this.cartSubject = new BehaviorSubject(this.cart);\n  }\n  addToCart(food) {\n    let cartItem = this.cart.items.find(item => item.food.id === food.id);\n    if (cartItem) {\n      return;\n    }\n    ;\n    this.cart.items.push(new CartItem(food));\n    this.setCartToLocalStorage();\n  }\n  removeFromCart(foodId) {\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocalStorage();\n  }\n  changeQuantity(foodId, quantity) {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if (!cartItem) {\n      return;\n    }\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocalStorage();\n  }\n  clearCart() {\n    this.cart = new Cart();\n    this.setCartToLocalStorage();\n  }\n  getCartObservable() {\n    return this.cartSubject.asObservable();\n  }\n  setCartToLocalStorage() {\n    this.cart.totalPrice = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prevsum, currentItem) => prevsum + currentItem.quantity, 0);\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n  getCartFromLocalStorage() {\n    const cartJson = localStorage.getItem('Cart');\n    return cartJson ? JSON.parse(cartJson) : new Cart();\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,IAAI,QAAQ,iCAAiC;AACtD,SAASC,eAAe,QAAoB,MAAM;AAElD,SAASC,QAAQ,QAAQ,qCAAqC;;AAK9D,OAAM,MAAOC,WAAW;EAItBC;IAHQ,SAAI,GAAS,IAAI,CAACC,uBAAuB,EAAE;IAC3C,gBAAW,GAA0B,IAAIJ,eAAe,CAAC,IAAI,CAACK,IAAI,CAAC;EAE3D;EAEhBC,SAAS,CAACC,IAAsB;IAC9B,IAAIC,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAKL,IAAK,CAACK,EAAE,CAAC;IACtE,IAAIJ,QAAQ,EAAE;MAAE;;IAAQ;IAExB,IAAI,CAACH,IAAI,CAACI,KAAK,CAACI,IAAI,CAAC,IAAIZ,QAAQ,CAACM,IAAK,CAAC,CAAC;IACzC,IAAI,CAACO,qBAAqB,EAAE;EAC9B;EAEAC,cAAc,CAACC,MAAc;IAC3B,IAAI,CAACX,IAAI,CAACI,KAAK,GAAG,IAAI,CAACJ,IAAI,CAACI,KAAK,CAACQ,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,IAAII,MAAM,CAAC;IACxE,IAAI,CAACF,qBAAqB,EAAE;EAC9B;EAEAI,cAAc,CAACF,MAAc,EAAEG,QAAgB;IAC7C,IAAIX,QAAQ,GAAG,IAAI,CAACH,IAAI,CAACI,KAAK,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACJ,IAAI,CAACK,EAAE,KAAKI,MAAM,CAAC;IACpE,IAAI,CAACR,QAAQ,EAAE;MAAE;;IAEjBA,QAAQ,CAACW,QAAQ,GAAGA,QAAQ;IAC5BX,QAAQ,CAACY,KAAK,GAAGD,QAAQ,GAAGX,QAAQ,CAACD,IAAI,CAACa,KAAK;IAC/C,IAAI,CAACN,qBAAqB,EAAE;EAC9B;EAEAO,SAAS;IACP,IAAI,CAAChB,IAAI,GAAG,IAAIN,IAAI,EAAE;IACtB,IAAI,CAACe,qBAAqB,EAAE;EAC9B;EAEAQ,iBAAiB;IACf,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACxC;EAEQV,qBAAqB;IAC3B,IAAI,CAACT,IAAI,CAACoB,UAAU,GAAG,IAAI,CAACpB,IAAI,CAACI,KAAK,CAACiB,MAAM,CAAC,CAACC,OAAO,EAAEC,WAAW,KAAKD,OAAO,GAAGC,WAAW,CAACR,KAAK,EAAE,CAAC,CAAC;IACvG,IAAI,CAACf,IAAI,CAACwB,UAAU,GAAG,IAAI,CAACxB,IAAI,CAACI,KAAK,CAACiB,MAAM,CAAC,CAACI,OAAO,EAAEF,WAAW,KAAKE,OAAO,GAAGF,WAAW,CAACT,QAAQ,EAAE,CAAC,CAAC;IAE1G,MAAMY,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC5B,IAAI,CAAC;IAC1C6B,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEJ,QAAQ,CAAC;IACtC,IAAI,CAACR,WAAW,CAACa,IAAI,CAAC,IAAI,CAAC/B,IAAI,CAAC;EAClC;EAEQD,uBAAuB;IAC7B,MAAM2B,QAAQ,GAAGG,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;IAC7C,OAAON,QAAQ,GAAGC,IAAI,CAACM,KAAK,CAACP,QAAQ,CAAC,GAAG,IAAIhC,IAAI,EAAE;EACrD;;SAjDWG,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAqC,SAAXrC,MAAW;EAAAsC,YAFV;AAAM","names":["Cart","BehaviorSubject","CartItem","CartService","constructor","getCartFromLocalStorage","cart","addToCart","food","cartItem","items","find","item","id","push","setCartToLocalStorage","removeFromCart","foodId","filter","changeQuantity","quantity","price","clearCart","getCartObservable","cartSubject","asObservable","totalPrice","reduce","prevSum","currentItem","totalCount","prevsum","cartJson","JSON","stringify","localStorage","setItem","next","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["/Users/thor/Documents/Applications/foodmine/frontend/src/app/services/cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cart } from '../components/shared/cart.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Food } from '../components/shared/food.model';\nimport { CartItem } from '../components/shared/cartItem.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private cart: Cart = this.getCartFromLocalStorage();\n  private cartSubject: BehaviorSubject<Cart> = new BehaviorSubject(this.cart);\n\n  constructor() { }\n\n  addToCart(food: Food | undefined): void {\n    let cartItem = this.cart.items.find(item => item.food.id === food!.id);\n    if (cartItem) { return };\n\n    this.cart.items.push(new CartItem(food!));\n    this.setCartToLocalStorage();\n  }\n\n  removeFromCart(foodId: number): void {\n    this.cart.items = this.cart.items.filter(item => item.food.id != foodId);\n    this.setCartToLocalStorage();\n  }\n\n  changeQuantity(foodId: number, quantity: number) {\n    let cartItem = this.cart.items.find(item => item.food.id === foodId);\n    if (!cartItem) { return }\n\n    cartItem.quantity = quantity;\n    cartItem.price = quantity * cartItem.food.price;\n    this.setCartToLocalStorage();\n  }\n\n  clearCart() {\n    this.cart = new Cart();\n    this.setCartToLocalStorage();\n  }\n  \n  getCartObservable(): Observable<Cart> {\n    return this.cartSubject.asObservable();\n  }\n\n  private setCartToLocalStorage(): void {\n    this.cart.totalPrice = this.cart.items.reduce((prevSum, currentItem) => prevSum + currentItem.price, 0);\n    this.cart.totalCount = this.cart.items.reduce((prevsum, currentItem) => prevsum + currentItem.quantity, 0);\n\n    const cartJson = JSON.stringify(this.cart);\n    localStorage.setItem('Cart', cartJson);\n    this.cartSubject.next(this.cart);\n  }\n\n  private getCartFromLocalStorage(): Cart {\n    const cartJson = localStorage.getItem('Cart');\n    return cartJson ? JSON.parse(cartJson) : new Cart();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}